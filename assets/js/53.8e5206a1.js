(window.webpackJsonp=window.webpackJsonp||[]).push([[53],{1188:function(a,t,s){"use strict";s.r(t);var v=s(3),_=Object(v.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h2",{attrs:{id:"jmm是什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#jmm是什么"}},[a._v("#")]),a._v(" JMM是什么")]),a._v(" "),t("p",[a._v("JMM（Java Memory Model），Java的内存模型。")]),a._v(" "),t("h2",{attrs:{id:"jmm的作用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#jmm的作用"}},[a._v("#")]),a._v(" JMM的作用")]),a._v(" "),t("p",[a._v("缓存一致性的协议，用来定义数据读写的规则。")]),a._v(" "),t("p",[a._v("JMM定义了线程工作内存和主内存的抽象关系：线程的共享变量存储在主内存中，每个线程都有一个私有的本地工作内存。")]),a._v(" "),t("p",[a._v("使用volatile关键字来解决共享变量的可见性的问题。")]),a._v(" "),t("p",[a._v("Java内存模型是围绕着并发编程中"),t("strong",[a._v("原子性、可见性、有序性")]),a._v("这三个特征来建立的。")]),a._v(" "),t("h2",{attrs:{id:"jmm的操作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#jmm的操作"}},[a._v("#")]),a._v(" JMM的操作")]),a._v(" "),t("p",[t("img",{attrs:{src:s(470),alt:"img"}})]),a._v(" "),t("h3",{attrs:{id:"jmm定义了8种操作来完成-每一种操作都是原子的、不可再拆分的-。"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#jmm定义了8种操作来完成-每一种操作都是原子的、不可再拆分的-。"}},[a._v("#")]),a._v(" JMM定义了8种操作来完成（每一种操作都是原子的、不可再拆分的）。")]),a._v(" "),t("ul",[t("li",[a._v("lock（锁定）：作用于主内存的变量，它把一个变量标识为一条线程独占的状态。")]),a._v(" "),t("li",[a._v("unlock（解锁）：作用于主内存的变量，它把一个处于锁定状态的变量释放出来，释放后的变量才可以被其他线程锁定。")]),a._v(" "),t("li",[a._v("read（读取）：作用于主内存的变量，它把一个变量的值从主内存传输到线程的工作内存中，以便随后的load动作使用。")]),a._v(" "),t("li",[a._v("load（载入）：作用于工作内存的变量，它把read操作从主内存中得到的变量值放入工作内存的变量副本中。")]),a._v(" "),t("li",[a._v("use（使用）：作用于工作内存的变量，它把工作内存中一个变量的值传递给执行引擎（每当虚拟机遇到一个需要使用到该变量的值的字节码指令时将会执行这个操作）。")]),a._v(" "),t("li",[a._v("assign（赋值）：作用于工作内存的变量，它把一个从执行引擎接收到的值赋给工作内存的变量（每当虚拟机遇到一个给该变量赋值的字节码指令时执行这个操作）。")]),a._v(" "),t("li",[a._v("store（存储）：作用于工作内存的变量，它把工作内存中一个变量的值传送到主内存中，以便随后的write操作使用。")]),a._v(" "),t("li",[a._v("write（写入）：作用于主内存的变量，它把store操作从工作内存中得到的变量的值放入主内存的变量中。")])]),a._v(" "),t("h2",{attrs:{id:"jmm定义的规则"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#jmm定义的规则"}},[a._v("#")]),a._v(" JMM定义的规则")]),a._v(" "),t("h3",{attrs:{id:"_8种操作必须满足的规则"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_8种操作必须满足的规则"}},[a._v("#")]),a._v(" 8种操作必须满足的规则：")]),a._v(" "),t("ul",[t("li",[a._v("不允许read和load、store和write操作之一单独出现。（不允许一个变量从主内存读取了但工作内存不接受；或者从工作内存发起回写了但主内存不接受的情况出现）")]),a._v(" "),t("li",[a._v("不允许一个线程丢弃它的最近的assign操作。（变量在工作内存中改变了值之后，必须把该变化同步回主内存）")]),a._v(" "),t("li",[a._v("不允许一个线程无原因地（没有发生过任何assign操作）把数据从线程的工作内存同步回主内存。")]),a._v(" "),t("li",[a._v("一个新的变量只能在主内存中“诞生”，不允许在工作内存中直接使用一个未被初始化（load或assign）的变量。（就是对一个变量实施use、store操作之前，必须先执行过了load和assign操作）")]),a._v(" "),t("li",[a._v("一个变量在同一时刻只允许一条线程对其进行lock操作，但lock操作可以被同一条线程重复执行多次，多次执行lock后，只有执行相同次数的unlock操作，变量才会被解锁。")]),a._v(" "),t("li",[a._v("如果对一个变量执行lock操作，那将会清空工作内存中此变量的值，在执行引擎使用这个变量前，需要重新执行load或assign操作初始化变量的值。")]),a._v(" "),t("li",[a._v("如果一个变量事先没有被lock操作锁定，那就不允许对它执行unlock操作，也不允许去unlock一个被其他线程锁定住的变量。")]),a._v(" "),t("li",[a._v("对一个变量执行unlock操作之前，必须先把此变量同步回主内存中（执行store、write操作）。")])]),a._v(" "),t("h2",{attrs:{id:"并发编程的三大特性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#并发编程的三大特性"}},[a._v("#")]),a._v(" 并发编程的三大特性")]),a._v(" "),t("h3",{attrs:{id:"原子性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#原子性"}},[a._v("#")]),a._v(" 原子性")]),a._v(" "),t("p",[a._v("一个或多个程序指令，要么全部正确执行完毕不能被打断，或者全部不执行")]),a._v(" "),t("h3",{attrs:{id:"可见性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#可见性"}},[a._v("#")]),a._v(" 可见性")]),a._v(" "),t("p",[a._v("当一个线程修改了某个共享变量的值，其它线程应当能够立即看到修改后的值。")]),a._v(" "),t("h3",{attrs:{id:"有序性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#有序性"}},[a._v("#")]),a._v(" 有序性")]),a._v(" "),t("p",[a._v("程序执行代码指令的顺序应当保证按照程序指定的顺序执行，即便是编译优化，也应当保证程序源语一致。")])])}),[],!1,null,null,null);t.default=_.exports},470:function(a,t,s){a.exports=s.p+"assets/img/kuangstudy14fa390b-435b-4b9f-8dc6-29e685e26172.11ddcb4e.jpg"}}]);