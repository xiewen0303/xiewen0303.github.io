(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{1184:function(a,v,s){"use strict";s.r(v);var t=s(3),_=Object(t.a)({},(function(){var a=this,v=a._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[v("h2",{attrs:{id:"体系结构"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#体系结构"}},[a._v("#")]),a._v(" 体系结构")]),a._v(" "),v("p",[v("img",{attrs:{src:s(454),alt:"img"}})]),a._v(" "),v("p",[a._v("方法区和堆是所有线程共享的内存区域；")]),a._v(" "),v("p",[a._v("而java栈、本地方法栈和程序计数器是运行时数据区线程私有的内存区域。")]),a._v(" "),v("p",[a._v("垃圾回收，指的是堆内存的垃圾回收；方法区是特殊的堆，JVM调优99%是调堆（Heap）。")]),a._v(" "),v("ol",[v("li",[a._v("Java堆（Heap）：是Java虚拟机所管理的内存中最大的一块。Java堆是被所有线程共享的一块内\n存区域，在虚拟机启动时创建。此内存区域的唯一目的就是存放对象实例，几乎所有的对象实\n例都在这里分配内存。")]),a._v(" "),v("li",[a._v("方法区（Method Area）：方法区（Method Area）与Java堆一样，是各个线程共享的内存区\n域，它用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数\n据。")]),a._v(" "),v("li",[a._v("程序计数器（Program Counter Register）：程序计数器（Program Counter Register）是一块\n较小的内存空间，它的作用可以看做是当前线程所执行的字节码的行号指示器。")]),a._v(" "),v("li",[a._v("JVM栈（JVM Stacks）：与程序计数器一样，Java虚拟机栈（Java Virtual Machine Stacks）也是\n线程私有的，它的生命周期与线程相同。虚拟机栈描述的是Java方法执行的内存模型：每个方\n法被执行的时候都会同时创建一个栈帧（Stack Frame）用于存储局部变量表、操作栈、动态\n链接、方法出口等信息。每一个方法被调用直至执行完成的过程，就对应着一个栈帧在虚拟机\n栈中从入栈到出栈的过程。")]),a._v(" "),v("li",[a._v("本地方法栈（Native Method Stacks）：本地方法栈（Native Method Stacks）与虚拟机栈所发\n挥的作用是非常相似的，其区别不过是虚拟机栈为虚拟机执行Java方法（也就是字节码）服\n务，而本地方法栈则是为虚拟机使用到的Native方法服务。")])]),a._v(" "),v("h2",{attrs:{id:"类的生命周期"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#类的生命周期"}},[a._v("#")]),a._v(" 类的生命周期")]),a._v(" "),v("p",[a._v("类从被加载到虚拟机内存中开始，到GC卸载出内存为止，它的整个生命周期包括：")]),a._v(" "),v("p",[v("code",[a._v("加载")]),a._v("、"),v("code",[a._v("连接")]),a._v("、"),v("code",[a._v("初始化")]),a._v("、"),v("code",[a._v("使用")]),a._v("和"),v("code",[a._v("卸载")]),a._v("，其中"),v("strong",[a._v("前三部是类的加载的过程")]),a._v("，如下图；")]),a._v(" "),v("p",[v("img",{attrs:{src:s(455),alt:"687474703a2f2f737466165787437676c6106e67"}})]),a._v(" "),v("ol",[v("li",[a._v("加载：查找并加载类的二进制数据，在Java堆中也创建一个java.lang.Class类的对象。")]),a._v(" "),v("li",[a._v("连接：连接又包含三块内容：验证、准备、初始化。\n"),v("ul",[v("li",[a._v("1）验证：文件格式、元数据、字节码、符号引用验证；")]),a._v(" "),v("li",[a._v("2）准备：为类的静态变量分配内存，并将其初始化为默认值；")]),a._v(" "),v("li",[a._v("3）解析：把类中的符号引用转换为直接引用。")])])]),a._v(" "),v("li",[a._v("初始化：为类的静态变量赋予正确的初始值。")]),a._v(" "),v("li",[a._v("使用：new出对象程序中使用。")]),a._v(" "),v("li",[a._v("卸载：执行垃圾回收。")])]),a._v(" "),v("p",[a._v("注意，加载、验证、准备、初始化、卸载这五个阶段发生的顺序是确定的，而解析阶段则不一定，它在某些情况下可以在初始化阶段之后开始。另外这7个阶段通常都是互相交叉的混合式进行的，通常会在一个阶段执行的过程中调用或激活另外一个阶段。")]),a._v(" "),v("h2",{attrs:{id:"jvm加载类的过程"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#jvm加载类的过程"}},[a._v("#")]),a._v(" JVM加载类的过程")]),a._v(" "),v("p",[a._v("JVM加载一个类的过程一般分为三个阶段：加载、连接和初始化。")]),a._v(" "),v("p",[a._v("JVM加载一个类时，首先通过类加载器找到类的字节码然后进行验证、准备和解析，最后执行类的静态代码块和静态变量的赋值操作。")]),a._v(" "),v("p",[v("img",{attrs:{src:s(456),alt:"JVM如何加载一个类"}})]),a._v(" "),v("h3",{attrs:{id:"一个类什么时候进入jvm"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#一个类什么时候进入jvm"}},[a._v("#")]),a._v(" 一个类什么时候进入JVM？")]),a._v(" "),v("ol",[v("li",[a._v("虚拟机启动时，执行main()方法的时候；")]),a._v(" "),v("li",[a._v("new对象的时候；")]),a._v(" "),v("li",[a._v("读取静态字段或静态方法的时候。")])]),a._v(" "),v("h3",{attrs:{id:"谁来负责将class文件加载到内存"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#谁来负责将class文件加载到内存"}},[a._v("#")]),a._v(" 谁来负责将Class文件加载到内存？")]),a._v(" "),v("ol",[v("li",[v("strong",[a._v("类装载器")]),a._v("负责加载Class文件，Class文件在文件开头特定的文件标识（CA FE BA BE）；")]),a._v(" "),v("li",[a._v("类装载器只负责加载，是否可以允许由执行引擎（Execution Engine）决定。")])]),a._v(" "),v("h3",{attrs:{id:"class文件存在内存哪个位置"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#class文件存在内存哪个位置"}},[a._v("#")]),a._v(" class文件存在内存哪个位置？")]),a._v(" "),v("p",[a._v("类加载器从class文件抽取类信息放在"),v("code",[a._v("方法区")]),a._v("；")]),a._v(" "),v("p",[a._v("类信息包括：方法代码，变量名，方法名，访问权限，返回值等等。")]),a._v(" "),v("h3",{attrs:{id:"class对象存储在哪里"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#class对象存储在哪里"}},[a._v("#")]),a._v(" Class对象存储在哪里？")]),a._v(" "),v("p",[v("strong",[a._v("堆")]),a._v("。每当加载器从class文件加载一个类时都会加载类信息到方法区，同时生成class对象，Class对象new对象各对象实例。")])])}),[],!1,null,null,null);v.default=_.exports},454:function(a,v,s){a.exports=s.p+"assets/img/jvmstructure001.645747e7.png"},455:function(a,v,s){a.exports=s.p+"assets/img/jvmstructure002.8343b3bc.png"},456:function(a,v,s){a.exports=s.p+"assets/img/jvmstructure003.3d701ba1.png"}}]);