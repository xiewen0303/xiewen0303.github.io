(window.webpackJsonp=window.webpackJsonp||[]).push([[105],{1252:function(t,o,n){"use strict";n.r(o);var r=n(3),p=Object(r.a)({},(function(){var t=this,o=t._self._c;return o("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[o("p",[t._v("使用 Spring Boot Actuator：Spring Boot Actuator 是 Spring Boot 提供的一个监控和管理 Spring Boot 应用的工具。它提供了丰富的端点，包括健康检查、性能指标、日志等，可以通过 HTTP 访问这些端点来获取应用的状态信息。")]),t._v(" "),o("p",[t._v("使用 Spring Cloud Sleuth：Spring Cloud Sleuth 是 Spring Cloud 提供的一个分布式跟踪解决方案，它可以帮助我们跟踪微服务调用的路径、耗时等信息。通过集成 Sleuth，可以获取到微服务之间调用的链路信息，从而进行性能分析和故障排查。")]),t._v(" "),o("p",[t._v("使用 Spring Cloud Metrics：Spring Cloud Metrics 是 Spring Cloud 提供的一个度量监控框架，它可以帮助我们获取微服务应用的度量指标，如 CPU 使用率、内存使用率、线程池信息等。通过收集和展示这些度量指标，可以更好地了解微服务应用的运行状态和性能瓶颈。")]),t._v(" "),o("p",[t._v("使用第三方监控工具：除了以上 Spring 自带的监控工具，还可以使用第三方的监控工具，如 Prometheus、Grafana 等，这些工具提供了更加丰富的监控指标和可视化展示功能，可以帮助我们更好地监控和管理微服务应用。")]),t._v(" "),o("p",[t._v("总之，在微服务应用开发过程中，应该将监控作为一个重要的环节，并结合业务需求和实际情况选择合适的监控工具和方法来进行监控和管理。")]),t._v(" "),o("p",[t._v("https://blog.csdn.net/qq_37756660/article/details/134860073")]),t._v(" "),o("p",[t._v("https://blog.csdn.net/u010191034/article/details/131474830")]),t._v(" "),o("p",[t._v("https://blog.51cto.com/u_16213575/7699547")]),t._v(" "),o("p",[t._v("https://gitee.com/asuramonitor/monitor")])])}),[],!1,null,null,null);o.default=p.exports}}]);